require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/stocks", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Stock. As you add validations to Stock, be sure to
  # adjust the attributes here as well.
  let(:random) {
    SecureRandom.alphanumeric
  }
  
  let(:valid_attributes) {
    {email: "stock-test-#{random}1@test.com", name: "Stock Test-#{random}1"}
  }

  let(:invalid_attributes) {
    {email: "", name: ""}
  }

  before(:context) do
    stock   = Stock.create!(email: "stock-test-#{SecureRandom.alphanumeric}x@test.com", name: "Stock Test-#{SecureRandom.alphanumeric}x")
    @stock  = stock
  end

  describe "GET /index" do
    it "renders a successful response" do
      Stock.create! valid_attributes
      get stocks_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      Stock.create! valid_attributes
      get stock_url(@stock.code)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      Stock.create! valid_attributes
      get new_stock_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      Stock.create! valid_attributes
      get edit_stock_url(@stock.code)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Stock" do
        expect {
          post stocks_url, params: { stock: valid_attributes }
        }.to change(Stock, :count).by(1)
      end

      it "redirects to the created stock" do
        post stocks_url, params: { stock: valid_attributes }
        expect(response).to redirect_to(stock_url(Stock.last.code))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Stock" do
        expect {
          post stocks_url, params: { stock: invalid_attributes }
        }.to change(Stock, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post stocks_url, params: { stock: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {email: "stock-test-#{random}-update@test.com", name: "Stock Test-#{random}-update"}
      }

      it "updates the requested stock" do
        stock = Stock.create! valid_attributes
        patch stock_url(stock.code), params: { stock: new_attributes }
        stock.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the stock" do
        stock = Stock.create! valid_attributes
        patch stock_url(stock.code), params: { stock: new_attributes }
        stock.reload
        expect(response).to redirect_to(stock_url(stock.code))
      end
    end

    context "with invalid parameters" do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch stock_url(@stock.code), params: { stock: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested stock" do
      stock = Stock.create!(email: "stock-test-#{random}3@test.com", name: "Stock Test-#{random}3")
      expect {
        delete stock_url(stock.code)
      }.to change(Stock, :count).by(-1)
    end

    it "redirects to the stocks list" do
      delete stock_url(@stock.code)
      expect(response).to redirect_to(stocks_url)
    end
  end
end
