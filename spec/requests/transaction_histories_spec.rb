require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/transaction_histories", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # TransactionHistory. As you add validations to TransactionHistory, be sure to
  # adjust the attributes here as well.
  let(:random) {
    SecureRandom.alphanumeric
  }
  
  let(:user) {
    User.create!(name: "User Test-#{random}", email: "user_test-#{random}@test.com")
  }

  let(:stock) {
    Stock.create!(name: "Stock Test-#{random}", email: "stock_test-#{random}@test.com")
  }

  let(:team) {
    Team.create!(name: "Team Test-#{random}", email: "team_test-#{random}@test.com")
  }

  let(:params_attributes) {
    {
      amount: 12345,
      owner_id: user.code,
      sender_id: user.wallet.address,
      receiver_id: team.wallet.address,
      description: ""
    }
  }

  def user_send_to_team
    user.wallet.update(balance: 100000)
  end

  describe "GET user transaction history#index" do
    it "renders a successful response" do
      get user_transaction_histories_url(user.code)
      expect(response).to be_successful
    end
  end

  describe "GET team transaction history#index" do
    it "renders a successful response" do
      get team_transaction_histories_url(team.code)
      expect(response).to be_successful
    end
  end

  describe "GET stock transaction history#index" do
    it "renders a successful response" do
      get stock_transaction_histories_url(stock.code)
      expect(response).to be_successful
    end
  end

  describe "GET user transaction history#debit" do
    it "renders a successful response" do
      get debit_user_transaction_histories_url(user.code)
      expect(response).to be_successful
    end
  end

  describe "GET team transaction history#debit" do
    it "renders a successful response" do
      get debit_team_transaction_histories_url(team.code)
      expect(response).to be_successful
    end
  end

  describe "GET Stock transaction history#debit" do
    it "renders a successful response" do
      get debit_stock_transaction_histories_url(stock.code)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid credit parameters" do
      it "creates a credit TransactionHistory" do
        user_send_to_team
        expect {
          post new_credit_user_transaction_histories_path(user.code), params: { credit: params_attributes }
        }.to change(Credit, :count).by(1)
      end

      it "redirects to root_path" do
        user_send_to_team

        post new_credit_user_transaction_histories_path(user.code), params: { credit: params_attributes }

        expect(response).to redirect_to(user_transaction_histories_path(user.code))
      end
    end

    context "with valid credit parameters" do
      it "creates a withdrawal TransactionHistory" do
        user_send_to_team
        params_attributes[:receiver_id] = "withdrawal"
        expect {
          post new_credit_user_transaction_histories_path(user.code), params: { credit: params_attributes }
        }.to change(Credit, :count).by(1)
      end

      it "redirects to user_transaction_histories_path" do
        user_send_to_team
        params_attributes[:receiver_id] = "withdrawal"
        post new_credit_user_transaction_histories_path(user.code), params: { credit: params_attributes }
        expect(response).to redirect_to(user_transaction_histories_path(user.code))
      end
    end

    context "with valid debit parameters" do
      it "creates a withdrawal TransactionHistory" do
        user_send_to_team
        params_attributes[:receiver_id] = "topup"
        expect {
          post new_debit_user_transaction_histories_path(user.code), params: { debit: params_attributes }
        }.to change(Debit, :count).by(1)
      end

      it "redirects to user_transaction_histories_path" do
        user_send_to_team
        params_attributes[:receiver_id] = "topup"
        post new_debit_user_transaction_histories_path(user.code), params: { debit: params_attributes }
        expect(response).to redirect_to(user_transaction_histories_path(user.code))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 302" do
        params_attributes[:amount] = -1
        post new_credit_user_transaction_histories_path(user.code), params: { credit: params_attributes }
        expect(response).to have_http_status(:found)
      end
    end
  end
end
